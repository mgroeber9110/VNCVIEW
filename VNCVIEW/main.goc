/*
 *      Main.goc
 *
 *      by Marcus Groeber
 */

@include <stdapp.goh>
@include <accpnt.goh>
@include <foam.goh>
#include <sem.h>
#include <sockmisc.h>

#include <ansi\string.h>
#include <ansi\stdio.h>
#include <ansi\stdlib.h>

@include "vncview.goh"
@include "vncui.goh"


/*
 ***************************************************************************
 *        Code for VNCViewProcessClass
 ***************************************************************************
 */

@classdecl VNCViewProcessClass, neverSaved;

RFBlink *currentLink;

@ifdef NOKIA
  sword mouse_x, mouse_y;

  word keyMode = MODE_THROUGH;
@endif


/***********************************************************************
 *        MSG_META_EXPOSED for VNCViewProcessClass
 ***********************************************************************/

@method VNCViewProcessClass, MSG_META_EXPOSED
{
    GStateHandle gstate;

    gstate = GrCreateState(win);
    GrBeginUpdate(gstate);

    if(currentLink)
    {
      HandleP(currentLink->RL_memHandle);

      if(currentLink->RL_frameBlock)
        GrDrawHugeImage(gstate,
          0, 0, IBS_1, currentLink->RL_frameFile, currentLink->RL_frameBlock);

      HandleV(currentLink->RL_memHandle);

@ifdef NOKIA
      if(keyMode == MODE_MOUSING)
      {
        MixMode mm = GrGetMixMode(gstate);

        GrSetMixMode(gstate, MM_INVERT);
        GrDrawHLine(gstate, 0, mouse_y, currentLink->RL_screenWidth-1);
        GrDrawVLine(gstate, mouse_x, 0, currentLink->RL_screenHeight-1);
        GrSetMixMode(gstate, mm);
      }
@endif
    }

    GrEndUpdate(gstate);
    GrDestroyState(gstate);
}

/***********************************************************************
 *    MSG_META_BRING_UP_HELP
 ***********************************************************************/
@ifdef NOKIA
/* Make sure that keyboard help for content works when it has the focus. */
@method VNCViewProcessClass, MSG_META_BRING_UP_HELP
{
    @send application::MSG_META_BRING_UP_HELP();
}
@endif

/***********************************************************************
 *    MSG_VNCV_PROCESS_HOME_MOUSE/MOVE_MOUSE_BY for VNCViewProcessClass
 ***********************************************************************/

@ifdef NOKIA
void InvalidateMouse(void)
{
    if(currentLink)
    {
      @call process::MSG_VNCV_PROCESS_UPDATE(NULL,
        mouse_x, 0, mouse_x, currentLink->RL_screenHeight-1);
      @call process::MSG_VNCV_PROCESS_UPDATE(NULL,
        0, mouse_y, currentLink->RL_screenWidth-1, mouse_y);
    }
}

@method VNCViewProcessClass, MSG_VNCV_PROCESS_HOME_MOUSE
{
    RectDWord rect;

    InvalidateMouse();

    @call VNCViewView::MSG_GEN_VIEW_GET_VISIBLE_RECT(&rect);

    mouse_x = (sword)(rect.RD_right + rect.RD_left)/2;
    mouse_y = (sword)(rect.RD_bottom + rect.RD_top)/2;

    InvalidateMouse();
}

@method VNCViewProcessClass, MSG_VNCV_PROCESS_MOVE_MOUSE_BY
{
    RectDWord rect;

    InvalidateMouse();

    mouse_x += dx;
    mouse_y += dy;

    /*
     * Ensure mouse stays on virtual screen
     */
    if(mouse_x < 0)
      mouse_x = 0;
    if(mouse_y < 0)
      mouse_y = 0;
    if(mouse_x > currentLink->RL_screenWidth-1)
      mouse_x = currentLink->RL_screenWidth-1;
    if(mouse_y > currentLink->RL_screenHeight-1)
      mouse_y = currentLink->RL_screenHeight-1;

    /*
     * Ensure that mouse stays on physical screen
     */
    @call VNCViewView::MSG_GEN_VIEW_GET_VISIBLE_RECT(&rect);

    if(mouse_x >= rect.RD_right)
      @call VNCViewView::MSG_GEN_VIEW_SCROLL_PAGE_RIGHT();
    else if(mouse_x < rect.RD_left)
      @call VNCViewView::MSG_GEN_VIEW_SCROLL_PAGE_LEFT();

    if(mouse_y >= rect.RD_bottom)
      @call VNCViewView::MSG_GEN_VIEW_SCROLL_PAGE_DOWN();
    else if(mouse_y < rect.RD_top)
      @call VNCViewView::MSG_GEN_VIEW_SCROLL_PAGE_UP();

    InvalidateMouse();

    /*
     * Relay new mouse position to driver
     */
    if(currentLink)
    {
      HandleP(currentLink->RL_memHandle);
      if(currentLink->RL_open)
      {
        SendMouseEvent(currentLink, mouse_x, mouse_y, 0);
      }
      HandleV(currentLink->RL_memHandle);
    }
}

@method VNCViewProcessClass, MSG_VNCV_PROCESS_MODE_SWITCH
{
    keyMode = mode;                     /* switch internal mode */

    switch(keyMode)
    {
      case MODE_THROUGH:
        @call StatusLine::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
        break;
      case MODE_MOUSING:
        @call StatusLine::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
        break;
      case MODE_PANNING:
        @call StatusLine::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
        break;
    }

    @call self::MSG_VNCV_PROCESS_HOME_MOUSE();
}

@method VNCViewProcessClass, MSG_VNCV_PROCESS_MOUSE_LEFT,
                             MSG_VNCV_PROCESS_MOUSE_RIGHT,
                             MSG_VNCV_PROCESS_MOUSE_LEFT_DBL
{
    if(currentLink)
    {
      HandleP(currentLink->RL_memHandle);
      if(currentLink->RL_open)
      {
        SendMouseEvent(currentLink, mouse_x, mouse_y, 0);

        switch(message)                     /* send events according to button */
        {
          case MSG_VNCV_PROCESS_MOUSE_RIGHT:
            SendMouseEvent(currentLink, mouse_x, mouse_y, BI_B2_DOWN);
            SendMouseEvent(currentLink, mouse_x, mouse_y, 0);
            break;
          case MSG_VNCV_PROCESS_MOUSE_LEFT_DBL:
            SendMouseEvent(currentLink, mouse_x, mouse_y, BI_B0_DOWN);
            SendMouseEvent(currentLink, mouse_x, mouse_y, 0);
          case MSG_VNCV_PROCESS_MOUSE_LEFT:
            SendMouseEvent(currentLink, mouse_x, mouse_y, BI_B0_DOWN);
            SendMouseEvent(currentLink, mouse_x, mouse_y, 0);
            break;
        }
      }
      HandleV(currentLink->RL_memHandle);
    }
}
@endif

/***********************************************************************
 *        Mouse event messages for VNCViewProcessClass
 ***********************************************************************/

@ifndef NOKIA           // No native mouse support at all for Nokia...

@method VNCViewProcessClass, MSG_META_PTR,
                             MSG_META_START_SELECT,    MSG_META_END_SELECT,
                             MSG_META_START_MOVE_COPY, MSG_META_END_MOVE_COPY,
                             MSG_META_START_FEATURES,  MSG_META_END_FEATURES,
                             MSG_META_START_OTHER,     MSG_META_END_OTHER
{
    if(currentLink)
    {
      HandleP(currentLink->RL_memHandle);
      if(currentLink->RL_open)
      {
        SendMouseEvent(currentLink, xPosition, yPosition, inputState);
        retVal->flags = MRF_PROCESSED;
      }
      HandleV(currentLink->RL_memHandle);
    }

    @callsuper();
}

@endif

/***********************************************************************
 *        Keyboard event handling for VNCViewProcessClass
 ***********************************************************************/

@method VNCViewProcessClass, MSG_META_KBD_CHAR
{
    word rfbkey;

@ifdef NOKIA
    if(keyMode == MODE_PANNING)
    {
      switch(character)
      {
        case (CS_CONTROL << 8) | VC_UP:
          if(!(flags & CF_RELEASE))
            @call VNCViewView::MSG_GEN_VIEW_SCROLL_PAGE_UP();
          return;
        case (CS_CONTROL << 8) | VC_DOWN:
          if(!(flags & CF_RELEASE))
            @call VNCViewView::MSG_GEN_VIEW_SCROLL_PAGE_DOWN();
          return;
        case (CS_CONTROL << 8) | VC_LEFT:
          if(!(flags & CF_RELEASE))
            @call VNCViewView::MSG_GEN_VIEW_SCROLL_PAGE_LEFT();
          return;
        case (CS_CONTROL << 8) | VC_RIGHT:
          if(!(flags & CF_RELEASE))
            @call VNCViewView::MSG_GEN_VIEW_SCROLL_PAGE_RIGHT();
          return;
      }
    }
    else if(keyMode == MODE_MOUSING)
    {
      if(!(flags & CF_RELEASE))
      {
        sword step;

        if(flags & CF_REPEAT_PRESS)
          step = 8;
        else
          step = 1;

        switch(character)
        {
          case (CS_CONTROL << 8) | VC_UP:
            @call self::MSG_VNCV_PROCESS_MOVE_MOUSE_BY(0, -step);
            return;
          case (CS_CONTROL << 8) | VC_DOWN:
            @call self::MSG_VNCV_PROCESS_MOVE_MOUSE_BY(0, step);
            return;
          case (CS_CONTROL << 8) | VC_LEFT:
            @call self::MSG_VNCV_PROCESS_MOVE_MOUSE_BY(-step, 0);
            return;
          case (CS_CONTROL << 8) | VC_RIGHT:
            @call self::MSG_VNCV_PROCESS_MOVE_MOUSE_BY(step, 0);
            return;
        }
      }
    }
@endif

    if(currentLink)
      rfbkey = MapKey(character);
    else
      rfbkey = 0;

    if(rfbkey)
    {
      HandleP(currentLink->RL_memHandle);
      if(currentLink->RL_open)
      {
        SendKeyEvent(currentLink, rfbkey, !(flags & CF_RELEASE));
      }
      HandleV(currentLink->RL_memHandle);
    }
    else
    {
      @callsuper();
    }
}

/***********************************************************************
 *    MSG_VNCV_PROCESS_KEY_CHANGED for VNCViewProcessClass
 ***********************************************************************/

@method VNCViewProcessClass, MSG_VNCV_PROCESS_KEY_CHANGED
{
    if(selection==0)
      @call KeyASCII::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    else
      @call KeyASCII::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
}

/***********************************************************************
 *    MSG_VNCV_PROCESS_KEY_SEND for VNCViewProcessClass
 ***********************************************************************/

@method VNCViewProcessClass, MSG_VNCV_PROCESS_KEY_SEND
{
    char asciiKey[2];
    word keyCode;
    WordFlags shift;

    @call SendKeyDialog::MSG_GEN_INTERACTION_ACTIVATE_COMMAND(IC_DISMISS);

    shift = @call KeyModifiers::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
    keyCode = @call KeySpecial::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    if(keyCode == 0)                    /* No special key requested? */
    {
      @call KeyASCII::MSG_VIS_TEXT_GET_ALL_PTR(asciiKey);
      keyCode = asciiKey[0];            /* Use ASCII key code */
    }

    if(currentLink && keyCode)
    {
      /* Send "press" sequence for all modifiers */
      if(shift & KEY_SHIFT)
        SendKeyEvent(currentLink, XK_Shift_L, TRUE);
      if(shift & KEY_CTRL)
        SendKeyEvent(currentLink, XK_Control_L, TRUE);
      if(shift & KEY_ALT)
        SendKeyEvent(currentLink, XK_Alt_L, TRUE);
      if(shift & KEY_META)
        SendKeyEvent(currentLink, XK_Meta_L, TRUE);

      /* Send press/release sequence  for the key itself */
      SendKeyEvent(currentLink, keyCode, TRUE);
      SendKeyEvent(currentLink, keyCode, FALSE);

      /* Send "release" sequence for all modifiers */
      if(shift & KEY_SHIFT)
        SendKeyEvent(currentLink, XK_Shift_L, FALSE);
      if(shift & KEY_CTRL)
        SendKeyEvent(currentLink, XK_Control_L, FALSE);
      if(shift & KEY_ALT)
        SendKeyEvent(currentLink, XK_Alt_L, FALSE);
      if(shift & KEY_META)
        SendKeyEvent(currentLink, XK_Meta_L, FALSE);
    }
}

/***********************************************************************
 *        MSG_VNCV_PROCESS_REQUEST_UPDATE for VNCViewProcessClass
 ***********************************************************************/

@method VNCViewProcessClass, MSG_VNCV_PROCESS_REQUEST_UPDATE
{
    @send self::MSG_VNCV_PROCESS_UPDATE_STATUS(RFBS_UPDATE_REQUEST);

    /* request complete updated screen */
    if(currentLink)
    {
      HandleP(currentLink->RL_memHandle);
      if(currentLink->RL_open)
      {
        SendFramebufferUpdateRequest(link, incremental, 0, 0,
          link->RL_screenWidth, link->RL_screenHeight);
      }
      HandleV(currentLink->RL_memHandle);
    }
}

/***********************************************************************
 *        MSG_VNCV_PROCESS_RFB_THREAD_CONNECTED for VNCViewProcessClass
 ***********************************************************************/

@method VNCViewProcessClass, MSG_VNCV_PROCESS_RFB_THREAD_CONNECTED
{
    WindowHandle win;
    word i, color;
    GStateHandle palGS;

    @send VNCViewView::MSG_GEN_VIEW_SET_DOC_BOUNDS(
      link->RL_screenHeight-1, link->RL_screenWidth-1, 0, 0);

    win = @call VNCViewView::MSG_GEN_VIEW_GET_WINDOW();
    if(win)                             /* set view's window to transparent */
    {
      WinSetInfo(win, WIT_COLOR, WCF_TRANSPARENT<<8);

      /* allocate temporary GState for palette mapping */
      palGS = GrCreateState(win);

      /* Note that GrMapColorRGB() writes a *word* to the address of the last
         pointer in some implementations. */

      GrCreatePalette(palGS);

      if(link->RL_bmFormat == BMF_4BIT)
        for(i=16; i<256; i++)
          GrSetPaletteEntry(palGS, i, 0, 0, 0);

      for(i=0; i<256; i++)              /* create color look-up table */
      {
        GrMapColorRGB(palGS,
          ((i & 0x07)<<5) * (word)0xFF / 0xE0,
          ((i & 0x38)<<2) * (word)0xFF / 0xE0,
          (i & 0xC0)      * (word)0xFF / 0xC0, &color);

        if(link->RL_bmFormat == BMF_4BIT && (byte)color > 15)
          link->RL_color[i] = 0;
        else
          link->RL_color[i] = (byte)color;
      }

      GrDestroyPalette(palGS);
      GrDestroyState(palGS);
    }

    link->RL_startTime = TimerGetCount();

    @call self::MSG_VNCV_PROCESS_REQUEST_UPDATE(currentLink, FALSE);
}

/***********************************************************************
 *        MSG_VNCV_PROCESS_UPDATE for VNCViewProcessClass
 ***********************************************************************/

@method VNCViewProcessClass, MSG_VNCV_PROCESS_UPDATE
{
    WindowHandle win;
    GStateHandle gstate;

    win = @call VNCViewView::MSG_GEN_VIEW_GET_WINDOW();
    if(win)                          /* invalidate rectangle */
    {
      gstate = GrCreateState(win);
      GrInvalRect(gstate, left, top, right, bottom);
      GrDestroyState(gstate);
    }
}

/***********************************************************************
 *        MSG_VNCV_PROCESS_ACK_UPDATE for VNCViewProcessClass
 ***********************************************************************/

@method VNCViewProcessClass, MSG_VNCV_PROCESS_ACK_UPDATE
{
    @call self::MSG_VNCV_PROCESS_REQUEST_UPDATE(link, TRUE);
}

/***********************************************************************
 *        MSG_VNCV_PROCESS_RFB_THREAD_ENDED for VNCViewProcessClass
 ***********************************************************************/

char *RFBErrorToString(RFBError err)
{
    const char *errorMsg[] = {
      "(no error)",
      "No access point has been defined.",
      "Cannot resolve server name.",
      "Cannot connect to server.",
      "Communications error.",
      "Unsupported protocol version.",
      "Connection failed.",
      "Authentication failed.",
      "Too many clients connected to server.",
      "Error creating off-screen bitmap."};

    return errorMsg[err];
}

@method VNCViewProcessClass, MSG_VNCV_PROCESS_RFB_THREAD_ENDED
{
    WindowHandle win;

    win = @call VNCViewView::MSG_GEN_VIEW_GET_WINDOW();
    if(win)                          /* set view's window to transparent */
      WinSetInfo(win, WIT_COLOR, C_WHITE);

    @send VNCViewView::MSG_GEN_VIEW_SET_DOC_BOUNDS(0, 0, 0, 0);
    @send VNCViewView::MSG_GEN_VIEW_REDRAW_CONTENT();

    if(err != RFBE_NO_ERROR)
    {
      UserStandardDialog(               /* notify user */
        (char *)NULL, (char *)NULL, (char *)NULL, (char *)NULL,
        RFBErrorToString(err),
        (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
          (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET));
    }

    @send LogOnDialog::MSG_GEN_INTERACTION_INITIATE();
    @send LogOffTrig::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
@ifdef NOKIA
     @send ButtonLevel1::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
@endif

    /* Wait for thread to close down before releasing semaphore */
    ThreadPSem(currentLink->RL_threadSemaphore);
    ThreadVSem(currentLink->RL_threadSemaphore);

    ThreadFreeSem(link->RL_threadSemaphore);
    MemFree(link->RL_memHandle);        /* release link descriptor struct */
    currentLink = NULL;
}

/***********************************************************************
 *        MSG_VNCV_PROCESS_LOGON for VNCViewProcessClass
 ***********************************************************************/

@method VNCViewProcessClass, MSG_VNCV_PROCESS_LOGON,
                             MSG_VNCV_PROCESS_REPLAY
{
   RFBError err;
   char server[MAX_IP_ADDR_STRING_LENGTH+1],
        display[VNCVIEW_DISPLAY_LENGTH+1],
        password[VNCVIEW_PASSWORD_LENGTH+1];
   word accPnt;

   if(currentLink)                      /* don't open link twice */
     return;

   @call application::MSG_META_SAVE_OPTIONS();

   if(message == MSG_VNCV_PROCESS_LOGON)
   {
     /* retrieve options from logon dialog */
     @call ServerName::MSG_VIS_TEXT_GET_ALL_PTR(server);
     @call DisplayNumber::MSG_VIS_TEXT_GET_ALL_PTR(display);
     @call Password::MSG_VIS_TEXT_GET_ALL_PTR(password);

@if (!defined(NOSOCKET)) && defined(NOKIA)
     accPnt = @call AccessPoint::MSG_ACCESS_POINT_CONTROL_GET_SELECTION();
@else
     accPnt = 1;
@endif

     if(accPnt)                         /* access point defined? */
       err = RFBConnect(server, atoi(display), password, accPnt, &currentLink);
     else
       err = RFBE_NO_ACCESS_POINT;
   }
   else                                 /* Replay */
   {
     err = RFBConnect(NULL,0,"", 0, &currentLink);
   }

   if(currentLink && err == RFBE_NO_ERROR)
   {                                    /* link opened successfully */
@ifdef NOKIA
     @send ButtonLevel1::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
@endif
     @send LogOffTrig::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
                                        /* Switch Logon to Logoff trigger */
   }
   else
   {
     UserStandardDialog(                /* notify user */
       (char *)NULL, (char *)NULL, (char *)NULL, (char *)NULL,
       RFBErrorToString(err),
       (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
         (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET));

     @call process::MSG_VNCV_PROCESS_UPDATE_STATUS(RFBS_NONE);

     @send LogOnDialog::MSG_GEN_INTERACTION_INITIATE();
                                        /* Re-enable Logon */
   }
}

/***********************************************************************
 *        MSG_VNCV_PROCESS_LOGOFF for VNCViewProcessClass
 ***********************************************************************/

@method VNCViewProcessClass, MSG_VNCV_PROCESS_LOGOFF
{
    if(currentLink)
      RFBDisconnect(currentLink);
}

/***********************************************************************
 *        MSG_VNCV_PROCESS_UPDATE_STATUS for VNCViewProcessClass
 ***********************************************************************/

@method VNCViewProcessClass, MSG_VNCV_PROCESS_UPDATE_STATUS
{
    const char *statusMsg[] = {
      "",
      "Connecting to server.",
      "Authenticating.",
      "Negotiating.",
      "Update requested.",
      "Updating screen.",
      "Synchronizing clipboard data.",
      "Closing connection."};

    @call StatusText::MSG_VIS_TEXT_REPLACE_ALL_PTR(statusMsg[status], 0);
}

/***********************************************************************
 *    MSG_GEN_PROCESS_OPEN/CLOSE_APPLICATION for VNCViewProcessClass
 ***********************************************************************/

@method VNCViewProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
   currentLink = NULL;

   @callsuper();

   @call application::MSG_GEN_APPLICATION_INSTALL_TOKEN();
   @send LogOnDialog::MSG_GEN_INTERACTION_INITIATE();

@ifdef NOKIA
   keyMode = MODE_THROUGH;
@endif
}

@method VNCViewProcessClass, MSG_META_DETACH
{
    if(currentLink)
    {
      @call self::MSG_VNCV_PROCESS_LOGOFF();

      /* Wait for thread to close down before allowing process thread to exit */
      ThreadPSem(currentLink->RL_threadSemaphore);
      ThreadVSem(currentLink->RL_threadSemaphore);
    }

    @callsuper();
}

/*
 ***************************************************************************
 *        Code for ModeTrrigerClass
 ***************************************************************************
 */

@ifdef NOKIA
@classdecl ModeTriggerClass;

@method ModeTriggerClass, MSG_TLT_ACTIVATE_OTHER_LEVEL
{
   @send process::MSG_VNCV_PROCESS_MODE_SWITCH(pself->MTI_mode);
   @callsuper();
}
@endif
